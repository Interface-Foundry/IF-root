apiVersion: v1
kind: Service
metadata:
  name: nlp
  labels:
    app: nlp
    tier: backend
spec:
  ports:
    # the port that this service should serve on
  - port: 8083
    targetPort: 8083
  selector:
    app: nlp
    tier: backend
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nlp
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  # labels:
  #   app: redis
  #   role: master
  #   tier: backend
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 1
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   matchLabels:
  #     app: chat
  #     role: master
  #     tier: backend
  template:
    metadata:
      labels:
        app: nlp
        tier: backend
    spec:
      containers:
      - name: nlp
        image: gcr.io/google_containers/nlp:v0.7.1 
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8083
---
apiVersion: v1
kind: Service
metadata:
  name: picstitch
  labels:
    app: picstitch
    tier: backend
spec:
  ports:
    # the port that this service should serve on
  - port: 5000
  selector:
    app: picstitch 
    tier: backend
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: picstitch
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  # labels:
  #   app: redis
  #   role: slave
  #   tier: backend
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 2
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   matchLabels:
  #     app: chat
  #     role: slave
  #     tier: backend
  template:
    metadata:
      labels:
        app: picstitch
        tier: backend
    spec:
      containers:
      - name: picstitch
        image: gcr.io/kip-styles/picstitch:v0.7.1
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access an environment variable to find the master
          # service's host, comment out the 'value: dns' line above, and
          # uncomment the line below.
          # value: env
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: chat
  labels:
    app: chat
    tier: frontend
spec:
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  # type: LoadBalancer
  ports:
    # the port that this service should serve on
  - port: 80
  selector:
    app: chat
    tier: frontend
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: chat
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  # labels:
  #   app: chat
  #   tier: frontend
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 3
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   matchLabels:
  #     app: chat
  #     tier: frontend
  template:
    metadata:
      labels:
        app: chat
        tier: frontend
    spec:
      containers:
      - name: chat
        image: gcr.io/kip-styles/chat:v0.7.1
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access environment variables to find service host
          # info, comment out the 'value: dns' line above, and uncomment the
          # line below.
          # value: env
        ports:
        - containerPort: 80apiVersion: v1
